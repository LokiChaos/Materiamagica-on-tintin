#nop lib/var.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: var;
#nop PROVIDES: lib/var;
#nop REQUIRES: lib/print;

/*
	Usage: @var_exists{<var>}
	Returns: 0 if var is not defined, 1 if it is defined
*/
#function {var_exists} {
	#math result {&{%0} != 0}
}

/*
	Usage: @var_isNil{<var>}
	Returns: 1 if value of <var> is nil {}, else 0
*/
#function {var_isNil} {
	#math result {"${%0}" == "" && @var_exists{%0}};
}

#function {var_isTable} {
	#math result {&{%0[]} != 0 && "%0" != ""};
}

#function {var_isList} {
	#if {@var_isTable{%0}} {
		#var result {1};
		#forall {${%0[]}} {
			#if {"&{%0[&0]}" != "&0"} {
				#var result {0};
			};
		};
	} {
		#var result 0;
	};
}

#function {var_isValue} {
	#math result {@var_exists{%0} && @var_isNil{%0} == 0 && @var_isTable{%0} == 0};
}

#function {var_isNumber} {
	#math _:IsNum {${%0}};
	#math result {"${_:IsNum}" == "${%0}"};
	#unvar _:IsNum;
}

#function {var_isInt} {
	#var result 0;
	#if {@var_isNumber{%0}} {
		#format _:VarisInt {%d} {${%0}};
		#math result {"${%0}" == "${_:VarisInt}"};
		#unvar _:VarisInt;
	}
}

#function {var_isFloat} {
	#math result {@var_isNumber{%0} && ! @var_isInt{%0}};
}


#function {var_isString} {
	#math result {@var_isValue{%0} && @var_isNumber{%0} == 0};
}


#function {var_isRef} {
	#var result 0;
	#if {@var_isValue{%0}} {
		#if {@var_exists{${%0}}} {
			#var result 1;
		};
	};
}

#function {var_refNil} {
	#var result {@var_isNil{${%0}}};
}

#function {var_refTable} {
	#var result {@var_isTable{${%0}}};
}

#function {var_refList} {
	#var result {@var_isList{${%0}}};
}

#function {var_refValue} {
	#var result {@var_isValue{${%0}}};
}

#function {var_refNumber} {
	#var result {@var_isNumber{${%0}}};
}

#function {var_refString} {
	#var result {@var_isString{${%0}}};
}

#function {var_refGetType} {
	#var result {*@var_getType{${%0}}};
}

#function {var_refIsType} {
	#var result {@var_isType{ {%1} {${%2}} }};
}

#function {var_valIsNil} {
	#math result {"%0" == ""};
}

#function {var_valIsTable} {
	#var _:VarDV {%0};
	#var result {@var_isTable{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valIsList} {
	#var _:VarDV {%0};
	#var result {@var_isList{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valIsValue} {
	#var _:VarDV {%0};
	#var result {@var_isValue{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valIsNumber} {
	#var _:VarDV {%0};
	#var result {@var_isNumber{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valIsString} {
	#var _:VarDV {%0};
	#var result {@var_isString{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valGetType} {
	#var _:VarDV {%0};
	#var result {@var_getType{_:VarDV}};
	#unvar _:VarDV;
}

#function {var_valIsType} {
	#var _:VarDV {%2};
	#var result {@var_isType{ {%1} {_:VarDV} }};
	#unvar _:VarDV;
}

#function {var_getType} {
	#if {"%0" == ""} {
		#var result {none};
	};
	#else {
		#if {@var_exists{%0} == 0} {
			#var result {undef};
		};
		#elseif {@var_isNil{%0}} {
			#var result {nil}
		};
		#elseif {@var_isTable{%0}} {
			#if {@var_isList{%0}} {
				#var result {list}
			};
			#else {
				#var result {table}
			};
		};
		#else {
			#if {@var_isNumber{%0}} {
				#if {@var_isInt{%0}} {
					#var result {int};
				};
				#else {
					#var result {float};
				};
			};
			#else {
				#var result {string}
			};
		};
	};
}

#function {var_isType} {
	#if {"%0" == ""} {
		#var result {none};
	};
	#else {
		#var _:VarIT[T] {
		     {undef} {{undef}{1}{nil}{0}{table}{0}{list}{0}{int}{0}{float}{0}{string}{0}}
		     {nil}   {{undef}{0}{nil}{1}{table}{0}{list}{0}{int}{0}{float}{0}{string}{0}}
		     {table} {{undef}{0}{nil}{0}{table}{1}{list}{1}{int}{0}{float}{0}{string}{0}}
		     {list}  {{undef}{0}{nil}{0}{table}{0}{list}{1}{int}{0}{float}{0}{string}{0}}
		     {value} {{undef}{0}{nil}{0}{table}{0}{list}{0}{int}{0}{float}{1}{string}{1}}
		     {number}{{undef}{0}{nil}{0}{table}{0}{list}{0}{int}{1}{float}{1}{string}{0}}
		     {int}   {{undef}{0}{nil}{0}{table}{0}{list}{0}{int}{1}{float}{0}{string}{0}}
		     {float} {{undef}{0}{nil}{0}{table}{0}{list}{0}{int}{0}{float}{1}{string}{0}}
		     {string}{{undef}{0}{nil}{0}{table}{0}{list}{0}{int}{0}{float}{0}{string}{1}}
		     {any}   {{undef}{1}{nil}{1}{table}{1}{list}{1}{int}{1}{float}{1}{string}{1}}
		     {def}   {{undef}{0}{nil}{1}{table}{1}{list}{1}{int}{1}{float}{1}{string}{1}}
		     {!nil}  {{undef}{0}{nil}{0}{table}{1}{list}{1}{int}{1}{float}{1}{string}{1}}
		};
		#var result {${_:VarIT[T][%1][@var_getType{%2}]}};
		#unvar _:VarIT;
	};
}

/*
	Usage: @var_checkArgs{ {<function name>} {<argtype list>} {<args>}
	<funtion name> - string, just used for error printing
	<argtype list> - a list of the expected arguments
	<args> - Normally %0 of the calling function
*/
#function {var_checkArgs} {
	#var _:ChkArg[right]        {1};
	#if {${client[Config][verifyArgs]}} {
		#var _:ChkArg[fname]        {%1};
		#var _:ChkArg[expected]     {%2};
		#list _:ChkArg[args] create {%3};
		#foreach {${_:ChkArg[expected][]}} {_:ChkArg[idx]} {
			#regex {${_:ChkArg[expected][${_:ChkArg[idx]}]}} {^\*%*$} {
				#if {!@var_refIsType{ {&1} {_:ChkArg[args][${_:ChkArg[idx]}]} }} {
					Print {${client[Config][argEchoLvl]}}
					      {Bad arg #%d: Function '%s' was expecting type '%s' but got type '%s'}
					      {${_:ChkArg[idx]}}
					      {${_:ChkArg[fname]}}
					      {${_:ChkArg[expected][${_:ChkArg[idx]}]}}
					      {@var_refGetType{_:ChkArg[args][${_:ChkArg[idx]}]}};
					#var _:ChkArg[right] {0};
				};
			} {
				#if {!@var_isType{ {${_:ChkArg[expected][${_:ChkArg[idx]}]}} {_:ChkArg[args][${_:ChkArg[idx]}]} }} {
					Print {${client[Config][argEchoLvl]}}
					      {Bad arg #%d: Function '%s' was expecting type '%s' but got type '%s'}
					      {${_:ChkArg[idx]}}
					      {${_:ChkArg[fname]}}
					      {${_:ChkArg[expected][${_:ChkArg[idx]}]}}
					      {@var_getType{_:ChkArg[args][${_:ChkArg[idx]}]}};
					#var _:ChkArg[right] {0};
				};
			};
		};
	};
	#var result {${_:ChkArg[right]}};
	#unvar _:ChkArg;
}


/* Verify loading*/
#var loadState 1;
/* EOF */
