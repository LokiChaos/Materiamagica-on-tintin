#nop core/state.tt;
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: state;
#nop PROVIDES: core/state;
#nop REQUIRES: core/gmcp;
/* 	State Machine Summary {{{
	This is the core of the state machine logic for the client.
	Many, many triggers on events to keep track of states...
	
	I highly advise looking over this file, but not alter.
	
	When creating your own tiggers, aliases, marcos, etc. You
	may use the valus in stateChar.  An easy example is
	you could make a keypad macro for moving, but when in combat it flees
	and while flying it does "say fly $dir"!  I have provided this
	as an example in superNumpad.tt
	
	Some states are handeled in other files, this file handles those
	that aren't tied to activites or informational commands.
	
	activites.tt - questing, on bounty, and on crystal hunt states
	bot.tt & reagent.tt - the have X waiting states
	
	Hunger, thirst, sitting/resting/sleeping/standing, away, quiet,
	digging, searching, tracking, have-mail, have-news, tagged,
	mounted, on-ship, encumbered, casting, playing, panic,
	combat starting/ending (combat.tt handles the details of combat).
	}}}*/

/* Initialize States {{{ */
#if {&{stateChar[]} == 0 } {
	#var stateChar[Questing]   0;
	#var stateChar[onBounty]   0;
	#var stateChar[onCrystal]  0;
	#var stateChar[Combat]     0;
	#var stateChar[Flying]     0;
	#var stateChar[mounted]    0;
	#var stateChar[OnShip]     0;
	#var stateChar[Quiet]	   0;
	#var stateChar[Sleeping]   0;
	#var stateChar[Resting]    0;
	#var stateChar[Sitting]    0;
	#var stateChar[Search]     0;
	#var stateChar[Dig]        0;
	#var stateChar[Casting]	   0;
	#var stateChar[Playing]    0;
	#var stateChar[Away]	   0;
	#var stateChar[Dead]	   0;
	#var stateChar[Paniced]    0;
	#var stateChar[Encumbered] 0;
	#var stateChar[Hungry]	   0;
	#var stateChar[Thirsty]    0;
	#var stateChar[Formed]	   0;
}
/* }}} */

/* Update State Based on Prompt Flags {{{ */
_Event_register {prompt_pre} {procFlags} {_statePromptUpdate};

#alias {_statePromptUpdate}
{
	#if {"%2" == "{Default|Social|Ship}"} {
		#regex {%3} {%*{\(|\<}} {
			#var __flag {&1};
		} {
			#var __flag {};
		};
		#math stateRoom[Safe]      {"${__flag}" == "%*[SAFE]%*"};
		#math stateChar[Away]      {"${__flag}" == "%*[AWAY]%*"};
		#math stateChar[Dig]       {"${__flag}" == "%*[Dig]%*"};
		#math stateChar[Search]    {"${__flag}" == "%*[Search]%*"};
		#math stateChar[have_mail] {"${__flag}" == "%*[Mail]%*"};
		#math stateChar[have_news] {"${__flag}" == "%*[NEWS]%*"};
		#math stateChar[tracking]  {"${__flag}" == "%*[T]%*"};
		#math stateChar[tagged]    {"${__flag}" == "%*[TAG!]%*"};
		#math stateChar[invis]     {"${__flag}" == "%*[*]%*"};
		#var _promptFlagsB ${__flag};
		#unvar __flag;
	};
}
/* }}} */

/* Room State {{{ */
#act {~^\e[1;34m(------------------------------------%*---)     %*}
{
	#if {"$stateChar[justLooking]" != "1"}
	{
		_Class load tmp/core/state/room core/state/rtlib/roomstate.tt;
		#var stateRoom {};
		_parseRoomInfo;
		#regex {%1} {Forested} {
			#var stateRoom[wooded] 1;
		};
		#if {$stateChar[is_onSpeedWalk]} {
			_Event_raise {speedStep};
		} {
			#line gag;
			#echo {<149>(%s<149>)    %s}  {@makeRoomBar{}} {%2};
			#var _roomExtraStr {@makeAuxRoomBar{}};
			#if { @std_str_len{${_roomExtraStr}} } {
				_Event_oneshot {visExits} {roomAux} {_EchoAccess};
			} {
				#unvar _roomExtraStr;
			};
			_Class purge tmp/core/state/room;
		};
	};
}

#alias {_EchoAccess} {
	#nop %1;
	#echo { <149>Access restrictions:<099> %s<099>} {${_roomExtraStr}};
	#unvar _roomExtraStr;
}

#act {^  Visible Exits: %1}
{
	#if {"$stateChar[justLooking]" != "1"}
	{
		#script {_exitsC} {libexec/exits "%1"};
		#var _exitsC {${_exitsC[1]}};
		#line gag;
		#if {"$stateChar[is_onSpeedWalk]" != "1"} {
		_Event_raise {visExits};};
	};
}

/* Detects if the CURRENT room is PK and what type */
#act {^%sWARNING: You are in a %* PLAYER KILLING room.}
{
	#if {$stateChar[justLooking] != 1} {
		#switch {"%2"}{
			#case {"CHAOTIC"} {
				#var stateRoom[CPK] 1;
			};
			#case {"NEUTRAL"} {
				#var stateRoom[NPK] 1;
			};
			#case {"LAWFUL"}  {
				#var stateRoom[LPK] 1;
			};
		};
	};
}

/* More room affects are tracked, but are in core/roomAffects.tt }}} */

/* Character States {{{ */

/* Death / Revival {{{ */
#act {^Your disembodied soul rises from your ravaged corpse.} {
	#var stateChar[Dead]      1;
	#var stateChar[Combat]    0;
	#var stateChar[inFlight]  0;
	#var stateChar[mounted]   0;
	#var stateChar[OnShip]    0;
	#var stateChar[Sleeping]  0;
	#var stateChar[Resting]   0;
	#var stateChar[Sitting]   0;
	#var stateChar[Casting]	  0;
	#var stateChar[Paniced]   0;
	#var stateChar[Searching] 0;
	#var stateChar[Digging]   0;
	#var stateChar[is_onSpeedWalk]  0;
	#unvar stateAffects;
	#var stateAffects[pass door]           1;
	#var stateAffects[sense life]          1;
	#var stateAffects[detect magic]        1;
	#var stateAffects[detect invisibility] 1;
	#var stateAffects[detect alignment]    1;

	_Event_raise {state_death};
}

#act {^The Powers take pity on you and restore your soul to your body.} {
	#var stateChar[Dead]       0;
	#var stateChar[Resting]    1;
	#var stateChar[Encumbered] 0;

	#unvar stateAffects;
	_Event_raise {state_alive};
}

#act {^You feel whole again.} {
	#var stateChar[Dead]       0;
	#var stateChar[Resting]    1;
	#var stateChar[Encumbered] 0;
	#unvar stateAffects;

	_Event_raise {state_alive};
}
/* }}} */

/* Hunger and Thrist {{{ */ 
#act {^Your stomach rumbles.} {
        #var stateChar[Hungry] 1;
		_Event_raise {state_hunger_nag};
}

#act {^Your throat feels parched.} {
        #var stateChar[Thirsty] 1;
		_Event_raise {state_thirst_nag};
}

#act {^You are no longer thirsty.} {
        #var stateChar[Thirsty] 0;
		_Event_raise {state_thirst_end};
}

#act {^Your hunger feels satisfied.} {
        #var stateChar[Hungry] 0;
		_Event_raise {state_hunger_end};
}

#act {^* You are thirsty.$} {
        #var stateChar[Thirsty] 1;
}

#act {^* You are hungry.$} {
        #var stateChar[Hungry] 1;
}
/* }}} */

/* Sitting, Resting, Sleeping, and Standing...  Slip, Blown over {{{ */
#alias {_sitSleepRest} {
	_sitSleepRestState {%1};
	_Event_raise {state_%1};
}

#alias {_sitSleepRestState} {
	#math stateChar[Sleeping]  {"%1"=="sleep"};
	#math stateChar[Resting]   {"%1"=="rest"};
	#math stateChar[Sitting]   {"%1"=="sit"};
}

#act {^You rest%*} {
	_sitSleepRest {rest};
}

#act {^You sit%*} {
	#regex {%1} {rest} {
		_sitSleepRest {rest};
	} {
		_sitSleepRest {sit};
	};
}

#act {^You go to sleep%*} {
	_sitSleepRest {sleep};
}

#act {^You scramble to your feet} {
	_sitSleepRest {stand};
	#var stateChar[Flying] 0;
	#var navigation[click] 0;
}

#act {^You seperate yourself from %*.} {
	_sitSleepRest {stand};
	#var stateChar[Flying] 0;
	#var navigation[click] 0;
}

#act {^You wake and stand up.} {
	_sitSleepRest {stand};
	#var stateChar[Flying] 0;
	#var navigation[click] 0;
}

#act {^You wake up and%*} {
	_sitSleepRest {rest};
}

#act {^You wake and%*} {
	_sitSleepRest {sit};
}

#act {^You stop resting} {
	_sitSleepRest {sit};
}

#act {^{You slip and fall!|You slip and fall on the icy ground!}} {
	_Event_raise {state_slipped};
	_sitSleepRest {sit};
	#if {$stateChar[is_onSpeedWalk]} {
		SpeedWalkCleanup;
	};
}

#act {^A sudden, strong gust of wind knocks you to the ground!} {
	_Event_raise {state_blown};
	_sitSleepRest {sit};
	#if {$stateChar[is_onSpeedWalk]} {
		SpeedWalkCleanup;
	};
}

#act {^You are buffeted to the %* by crosswinds!$} {
	_Event_raise {state_buffeted} {%1};
}

#act {^You are already standing, and in combat as well.} {
	_sitSleepRestState {stand};
	#var stateChar[Combat] 1;
}
/* }}} */

/* Mounts/Riding {{{ */
#act {^You mount %*, and start riding %S.$} {
	#var stateChar[Mounted]	  1;
	_Event_raise {state_mount} {%1};
}

#act {^You dismount from %*.$} {
	#var stateChar[Mounted]	  0;
	_Event_raise {state_dismount} {%1};
}

#act {^You {unhitch|hitch} %* {to|from} %*.$} {
	_Event_raise {state_%1} {%2} {%4};
}

#act {^Your mount is too exhausted.$} {
	_Event_raise {state_mount_nost};
};
/* }}} */

/*  Casting State {{{ */

#act {^You begin to speak the words of the spell...} {
	#var stateChar[Casting] 1;
	#if {$prefs[muteCast] && $stateChar[Combat]} {
		#line gag;
	};
	_Event_raise {state_casting};
}

#act {^You begin reciting the words of the {in|e}vocation...} {
	#var stateChar[Casting] 1;
	#if {$prefs[muteCast] && $stateChar[Combat]} {
		#line gag;
	};
	_Event_raise {state_casting};
}

#act {^You have completed your {casting|invocation|evocation}.} {
	#var stateChar[Casting] 0;
	#if {$prefs[muteCast] && $stateChar[Combat]} {
		#line gag;
	};
	_Event_raise {state_casted};
}

#act {^You lose your concentration.} {	
	_Event_raise {state_fumble};
}

/* TODO: Need to add counterspell/bash */

#act {^You begin to play a tune on %*...$} {
	#var stateChar[Playing] 1;
	#if {$prefs[muteCast] && $stateChar[Combat]} {
		#line gag;
	};
	_Event_raise {state_playing};
}

#act {^You have completed your song.$} {
	#var stateChar[Playing] 0;
	#if {$prefs[muteCast] && $stateChar[Combat]} {
		#line gag;
	};
	_Event_raise {state_played};
}
/* }}} */

/* Lagged {{{ */
#act {^Your muscles stop responding.$} {
	#var stateChar[Lag] 1;
	#undelay lagEle;
	#delay {lagEle} {
		#var stateChar[Lag] 0;
	} {3};
	_Event_raise {state_lagged};
}
/* }}} */

/* Away, Quiet, and Guide Status {{{ */
#act {^You have been marked away.} {
	#var stateChar[Away] 1;
	_Event_raise {state_away} {1};
}

#act {^You are no longer marked away.} {
	#var stateChar[Away] 0;
	_Event_raise {state_away} {0};
}

#act {^QUIET is now OFF} {
	#var stateChar[Quiet]	  0;
	_Event_raise {state_quiet} {0};
}

#act {^QUIET                        is OFF.} {
	#var stateChar[Quiet]	  0;
}

#act {^QUIET                        is ON .} {
	#var stateChar[Quiet]	  0;
}

#act {^QUIET is now ON} {
	#var stateChar[Quiet]	  1;
	_Event_raise {state_quiet} {1};
}

#act {^You are now available for player assistance} {
	#var stateChar[Guide] 1;
}

#act {^You are no longer listed as available for player assistance} {
	#var stateChar[Guide] 0;
}
/* }}} */

/* COMBAT State {{{
    This only tracks if you're in comabt or not
    more indepth triggers in combat.tt */

#act {^You enter into combat with %*.} {
	_Event_raise {combat_start} 		{%1};
}

#act {^You join the melee opposing %*.} {
	_Event_raise {combat_start} 		{%1};
}

#act {^You change the focus of your attack to %*.} {
	_Event_raise {combat_start} 		{%1};
}

#act {%* begins attacking you!$} {
	_Event_raise {combat_start} 		{%1};
	_sitSleepRestState {stand};
	#var stateChar[Flying]	  0;
	#var navigation[click]    0;
}

#act {^You receive %W experience points.} {
	#math exp[Count] {$exp[Count] + %1};
	#math exp[Kills] {$exp[Kills] + 1};
	#math exp[Mean]  {$exp[Mean] + ((%1 - $exp[Mean]) / $exp[Kills])};
	_Event_raise {combat_kill};
}
/* }}} */

/* Panic {{{ */
#act {^You pant and gasp, trying to catch your breath.} {
	#var stateChar[Paniced]    {$stateChar[Combat]};
	#delay {clearPanic} {
		#var stateChar[Paniced] 0;
	} {20};
}

#act {^A calming wave of energy washes over you.} {
	#var stateChar[Paniced]    {$stateChar[Combat]};
	#delay {clearPanic} {
		#var stateChar[Paniced] 0;
	} {20};
}

#act {^The feeling of combat-induced panic subsides.} {
	#var stateChar[Paniced]    0;
}
/* }}} */

/* Enter/Exit Social{{{ */
#act {^A glowing portal appears before you, and you step carefully through.} {
	#buffer get __lastLine {1} {1};
	#if {"${__lastLine[1]}" == "You have no invisibility skills affecting you."} {
			_Event_raise {social_enter};
		} {
			_Event_raise {social_exit};
			#unvar stateChar[inChatRoom];
		};
	#unvar __lastLine;
}
/* }}} */

/* }}} */
