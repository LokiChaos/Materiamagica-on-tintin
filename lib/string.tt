#nop lib/string.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: string;
#nop PROVIDES: lib/string;

#function {std_str_sanitize} {
	#var result {%0};
	#replace {result} {'} {\047};
}

/*
	Usage: @std_string_esc{ <string> }
	<string> = a string
	Returns: <string> with all non-Alphanum, _, and - escaped.
*/
#function {std_str_esc} {
	#var result {%0};
	#replace {"} {\\"};
	#script {result} {echo "$(echo "%0" | sed 's/[^-A-Za-z0-9_]/\\&/g')"};
	#var result {$result[1]};
}

/*
	Usage: @std_string_escape{ {<string>} {<pat>;<rep>} [...] }
	<string> = a string
	<pat> = a patter to be replaced
	<rep> = what to replace <pat> with
	Any number of <pat>/<rep> pairs my be given
	This is a genralized pattern replacement function.
	Generally, it is called by another specific-case escape function.
	Returns: <string> will every instance of every <pat> replaced with their corrisponding <rep>
*/
#func {std_str_escape} {
	#var result %1;
	#var _:esctmp[aidx] 0;
	#foreach {%0} {_:esctmp[arg]} {
		#math _:esctmp[aidx] {1 + ${_:esctmp[aidx]}};
		#if {${_:esctmp[aidx]} > 1 } {
			#var _:esctmp[asidx] 0;
			#var _:esctmp[a][2] {};
			#foreach {${_:esctmp[arg]}} {_:esctmp[argsub]} {
				#math _:esctmp[asidx] {1 + ${_:esctmp[asidx]}};
				#var _:esctmp[a][${_:esctmp[asidx]}] {${_:esctmp[argsub]}};
			};
			#line sub var #replace {result} {${_:esctmp[a][1]}} {${_:esctmp[a][2]}};
			#unvar _:esctmp[a];
		};
	};
	#unvar _:esctmp;
};

/* Escape Un-safe for sh/awk/sed*/
/*
	Usage: @std_string_escape_shell{ <string> }
	<string> = a string
	Returns: <string> with all non-Alphanum, _, and - escaped.
*/
#function {std_str_escape_shell} {
	#var result @std_str_escape{ {%0} {\';\047} {\";\\"} };
};

/* Escaped URI */
#function {std_str_escape_uri} {
	#var result @std_str_escape{ {%0}
	{\{;\0457B} {\};\0457D}
	{\ ;\04520} {\=;\0453D} {\&;\04526}
	{\:;\0453A} {\\\;;\0453B} {\/;\0452F} {\\;\0455C}
	{\<;\0453C} {\>;\0453E} {\[;\0455B} {\];\0455D}
	{\$;\04524}	{\#;\04523} {\|;\0457C} {\^;\0455E}
	{\~;\0457E} {\`;\04560} {\?;\0453F} {\@;\04540}
	};
};

/*
	Usage: @std_str_dropcomma{ <string> }
	<string> = a string
	Returns: the <string> with commas removed, intended for numbers
	         eg: 1,337 -> 1337
*/
#function {std_str_dropcomma} {
	#var result {%0};
	#replace result {,} {};
}

/*
	Usage: @std_str_strip{ <string> }
	<string> = a string
	Returns: <string> will all SGR codes, tintin color codes, etc removed
*/
#function {std_str_strip} {
	#line strip {#var result {%0}};
	#replace result {<%.%.%.>} {};
}

/*
	Usage: @std_str_len{ <string> }
	<string> = a string
	Returns: the length of <string>
*/
#function {std_str_len} {
	#format result {%L} {%0};
}

/*
	Usage: @std_str_trim{ <string> }
	<string> = a string
	Returns: <string> with all leading and trailing spaces stripped
*/
#function {std_str_trim} {
	#regex {%0} {^{ *}%*{ *}$} {
		#var result {&2};
	};
}

/*
	Usage: @std_str_toLower{ <string> }
	<string> = a string
	Returns: <string> with all upper case converted to lower
*/
#function {std_str_toLower} {
	#format result {%l} {%0};
}

/*
	Usage: @std_str_toUpper{ <string> }
	<string> = a string
	Returns: <string> with all lower case converted to upper
*/
#function {std_str_toUpper} {
	#format result {%u} {%0};
}

/*
	Usage: @std_str_tokenize{ <string> }
	<string> = a string
	Returns: a list of the words in <string>, in the order they appear in
*/
#function {std_str_tokenize} {
	#list result create %0;
}

/*
	Usage: @std_str_reverse{ <string> }
	<string> = a string
	Returns: <string> mirrored/fliped/reversed
	        e.g.: foobar -> raboof
*/
#function {std_str_reverse} {
	#format result {%r} {%0};
}

/*
	Usage: @std_str_substr{ {<string>} {<pos>} {<length>} }
	<pos> = integer position of substring
	<length> = integer length of substring
	Returns: nil or substring of <length> starting at <posistion> in <string>.
*/
#function {std_str_substr} {
	#regex {%1} {^{.{%2}}{.{%3}}%*} {
		#var result {&2};
	} {
		#var result {};
	};
}

/* Verify loading */
#var loadState {1};
/* EOF */
