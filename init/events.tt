#nop init/events.tt;
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: init/events;
#nop PROVIDES: init/events;

/*  Program Start Event {{{
	- Save tintin++ client[Version] info
*/
#event {PROGRAM START}
{
	#format client[Version][tt] {%p} {%1};
	#script {echo "#var client[Version][term] $TERM"};
	#script {echo "#var client[Version][tmux] `tmux -V|cut -c 6-`"}
}
/* }}} */

/* Screen Resize Event {{{ */
#event {SCREEN RESIZE} {
	#var client[State][Rows] {%1};
	#var client[State][Cols] {%0};
	#if {"$sessionName" != "gts" && $client[State][Rows] != $client[State][OldRows] || $client[State][Cols] != $client[State][OldCols]} {
		_Event_raise {screen_resize} {$client[State][Rows]} {$client[State][Cols]} {$client[State][OldRows]}  {$client[State][OldCols]}
	};
	#var client[State][OldRows] {$client[State][Rows]};
	#var client[State][OldCols] {$client[State][Cols]};
}
/* }}} */

/* Connect & Disconnect Events {{{ */
/*
	Called when connected sucessfully to the game server
	- Ensure $sessionName is defined and accurate
	- Read in saved Command history
	- Read in Core Config script & User scripts
	- Rename tmux session to match
	- Load Login lib to handle sign in
*/
#event {SESSION CONNECTED} {
	#var sessionName {%0};
	#gts {#var lastSession {}; #var client[State][recAtt] 0;};
	#history read char/${sessionName}/var/cmdhistory.hist;
	#read init/core.tt;
	_Event_raise {session_connect};
	#showme {\033k${sessionName}\033\\};
	#if {$client[Config][login][makeCaps]} {
		#system {makeCaps ${sessionName}};
	};
	_Class load tmp/init/login init/login/login.tt;
}

/*
	Called when disconnected from the game server
	- Save Command History
	- Make an emegency backup of the session
	- Dump the buffer to a temp log
	- Start reconnect process
*/
#event {SESSION DISCONNECTED} {
	#switch {"%0"} {
		#case {"mtt"} {
			_loadChars;
			_printMenu;
		};
		#default {
			_Event_raise {session_disconnect};
			#history write char/%0/var/cmdhistory.hist;
			#write char/%0/var/lastSessionBackup.tt;
			#showme {\033ktt++\033\\};
			#gts {#var lastSession {{sessionName}{%0}{charName}{$charName}{server}{%1}{port}{%3}};};
			#gts {_Class load init/login/reconnect init/login/reconnect.tt;};
		};
	};
}

#event {SESSION TIMED OUT} {
	#gts {#var lastSession {{sessionName}{%0}{charName}{$charName}{server}{%1}{port}{%3}};};
	#gts {_Class load init/login/reconnect init/login/reconnect.tt;};
}
/* }}} */

/* Gag Session lines */
#gag {^#SESSION}
#gag {^#TRYING TO LAUNCH}

/* Events to track entered and sent commands {{{ */
/* Sent %0 to the game, reset gameIdle time */
#event {SEND OUTPUT} {
	#if {"$sessionName" == "gts"} {
		#return
	};
	#if {$client[State][debug]} {
		#var __debugTemp {%0};
		#replace __debugTemp {\cm\n} {};
		#format {__debugTemp} {%t SENT: %s} {{%Y-%m-%d %H:%M:%S}} {${__debugTemp}};
		#line log {tmp/debug.$sessionName} {${__debugTemp}};
		#unvar __debugTemp;
	};
	#var client[State][gameIdle] 0;
}

/* Recieved a command from the user, reset clientIdle time */
#event {RECEIVED INPUT} {
	#if {"$sessionName" == "gts"} {
		#return
	};
	#if {$client[State][debug]} {
		#format {__debugTemp} {%t RCVD: %s} {{%Y-%m-%d %H:%M:%S}} {%0};
		#line log {tmp/debug.$sessionName} {${__debugTemp}};
		#unvar __debugTemp;
	};
	#var client[State][clientIdle] 0;
}
/* }}} */

/* Verify loading */
#var loadState {1};
/* EOF */
