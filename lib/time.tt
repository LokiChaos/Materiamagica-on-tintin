#nop lib/time.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: time;
#nop PROVIDES: lib/time;

/*
	Usage: @std_getTime{}
	Returns: current time in HH:MM:SS format
*/
#function {std_getTime} {
	#format {result} {%t} {%H:%M:%S};
}

/*
	Usage: @std_getDate{}
	Returns: current time in YYYY-MM-DD format
*/
#function {std_getDate} {
	#format {result} {%t} {%Y-%m-%d};
}

/*
	Usage: @std_getTimestamp{}
	Returns: current time in YYYY-MM-DD HH:MM:SS format
*/
#function {std_getTimestamp} {
	#format {result} {%t} {%Y-%m-%d %H:%M:%S};
}

/*
	Usage: @std_getEpoch{}
	Returns: current Unix Epoch time
*/
#function {std_getEpoch} {
	#format {result} {%T};
}

/*
	Usage: @std_getuEpoch{}
	Returns: current micro Unix Epoch time
*/
#function {std_getuEpoch} {
	#format {result} {%U};
}

/*
	Usage: @std_getTimeDelta{ <time> }
	<time> = Unix Epoch time
	Returns: time difference between current time and <time> in seconds
	         A negative value means <time> is in the future
*/
#function {std_getTimeDelta} {
	#math result {@std_getEpoch{} - %1};
}

/*
	Usage: @std_getuTimeDelta{ <utime> }
	<utime> = micro Unix Epoch time
	Returns: time difference between current time and <time> in microseconds
	         A negative value means <utime> is in the future
*/
#function {std_getuTimeDelta} {
	#math result {@std_getuEpoch{} - %1};
}

/*
	Usage: @std_unixToTime{ {<unix Epoch time>} [{<format>}]}
	Returns: given Unix epoch time in format or default %c
*/
#function {std_unixToTime} {
	#if {"%1" == ""} {
		Print {ERROR} {std_unixToTime: argument error};
	};
	#else {
		#if {"%2" != ""} {
			#format {result} {%t} {{%2} {%1}};
		} {
			#format {result} {%t} {{%c} {%1}};
		};
	};
}

/* Verify loading */
#var loadState {1};
/* EOF */
