#nop lib/debug.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: debug;
#nop PROVIDES: lib/debug;

#alias {printVar} {
	#if {"%1" == ""} {
		#echo {printVar needs a variable name};
	};
	#else {
		#if {"&{%1}" == "0"} {
			#echo {\${%s} does not exist.} {%1};
		};
		#else {
			#switch {"%2"} {
				#case {"nocolor"} {
					#var _:DVC[format] {nocolor};
				};
				#case {"{tintin|tt}"} {
					#var _:DVC[format] {tintin};
				};
				#case {"json"} {
					#var _:DVC[format] {json};
				};
				#case {"lua"} {
					#var _:DVC[format] {lua};
				};
				#default {
					#var _:DVC[format] {color};
				};
			};
			_procVar {%1} {print} {${_:DVC[format]}} {nil} {2};
			#unvar _:DVC;
		};
	};
}

#alias {dumpVar} {
	#if {"%1" == ""} {
		#echo {dumpVar needs a variable name};
	};
	#else {
		#if {"&{%1}" == "0"} {
			#echo {\${%s} does not exist.} {%1};
		};
		#else {
			#switch {"%2"} {
				#case {"color"} {
					#var _:DVC[format] {color};
				};
				#case {"{tintin|tt}"} {
					#var _:DVC[format] {tintin};
				};
				#case {"json"} {
					#var _:DVC[format] {json};
				};
				#case {"lua"} {
					#var _:DVC[format] {lua};
				};
				#default {
					#var _:DVC[format] {nocolor};
				};
			};
			#if {"%3" == ""} {
				#var _:DVC[file] {dump.var};
			} {
				#var _:DVC[file] {%3};
			};
			#echo {Dumping '\$\{%1\}' to file %s...} {${_:DVC[file]}};
			_procVar {%1} {dump} {${_:DVC[format]}} {${_:DVC[file]}} {4};
			#unvar _:DVC;
		};
	};
}

#alias {dumpAllVar} {
	#forall {${[]}} {
		dumpVar {&0} {%2} {%3};
	};
};

#alias {listVar} {
	#forall {${[]}} {
		#echo { %s} {&0};
	};
	#echo {%d variables} {&{[]}};
}

/* varName dump/print format filename */
#alias {_procVar} {
	#var _:DV[cmdTbl] {
		{print}{#echo {%s}}
		{dump}{#line log {%4}}
	};
	#var _:DV[cmd]    {${_:DV[cmdTbl][%2]}};
	#var _:DV[fmt]    {%3};
	#var _:DV[indent] {%5};
	#var _:DV[format] {
		{nocolor}{
			{varVal}{\$\{%s\} = '%s'}
			{varNil}{\$\{%s\} = nil}
			{varInt}{\$\{%s\} = %s}
			{varList}{\$\{%s\} = \x7B}
			{varEnd}{ \x7D}
			{listStart}{%s = \x7B}
			{keyVal}{%s = '%s'}
			{keyNil}{%s = nil}
			{keyInt}{%s = %s}
			{listEnd}{ \x7D}
		}
		{color}{
			{varVal}{<169>\$\{<149>%s<169>\} <139>=<099> '%s'<099>}
			{varNil}{<169>\$\{<149>%s<169>\} <139>= <119>nil<099>}
			{varInt}{<169>\$\{<149>%s<169>\} <139>= <129>%s<099>}
			{varList}{<169>\$\{<149>%s<169>\} <139>= <169>\x7B<099>}
			{varEnd}{ <169>\x7D<099>}
			{listStart}{<149>%s <139>= <169>\x7B<099>}
			{keyVal}{<149>%s <139>=<099> '%s'<099>}
			{keyNil}{<149>%s <139>= <119>nil<099>}
			{keyInt}{<149>%s <139>= <129>%s<099>}
			{listEnd}{ <169>\x7D<099>}
		}
		{tintin}{
			{varVal}{#VAR \x7B%s\x7D \x7B%s\x7D}
			{varNil}{#VAR \x7B%s\x7D \x7B\x7D}
			{varInt}{#VAR \x7B%s\x7D \x7B%s\x7D}
			{varList}{#VAR \x7B%s\x7D \x7B}
			{varEnd}{\x7D}
			{listStart}{\x7B%s\x7D\x7B}
			{keyVal}{\x7B%s\x7D\x7B%s\x7D}
			{keyNil}{\x7B%s\x7D\x7B%s\x7D}
			{keyInt}{\x7B%s\x7D\x7B%s\x7D}
			{listEnd}{\x7D}
		}
		{json}{
			{varVal}{\x7B\n "%s": "%s"\n\x7D}
			{varNil}{\x7B\n "%s": nil\n\x7D}
			{varInt}{\x7B\n "%s": %s\n\x7D}
			{varList}{\x7B\n "%s": \x7B}
			{varEnd}{ \x7D\n\x7D}
			{listStart}{"%s": \x7B}
			{keyVal}{"%s": "%s"}
			{keyNil}{"%s": nil}
			{keyInt}{"%s": %s}
			{listEnd}{\x7D}
		}
		{lua}{
			{varVal}{%s = "%s"}
			{varNil}{%s = nil}
			{varInt}{%s = %s}
			{varList}{%s = \x7B}
			{varEnd}{ \x7D}
			{listStart}{["%s"] = \x7B}
			{keyVal}{["%s"] = "%s"}
			{keyNil}{["%s"] = nil}
			{keyInt}{["%s"] = %s}
			{listEnd}{ \x7D}
		}
	};
	#if {"&{%1[]}" == "0"} {
		#if {"${%1}" == ""} {
				#format _:DV[print] {${_:DV[format][${_:DV[fmt]}][varNil]}} {%1};
		};
		#else {
			#regex {${%1}} {^{[0-9-]+}$} {
				#format _:DV[print] {${_:DV[format][${_:DV[fmt]}][varInt]}} {%1} {${%1}};
			
			} {
				#format _:DV[print] {${_:DV[format][${_:DV[fmt]}][varVal]}} {%1} {${%1}};
			};
		};
		${_:DV[cmd]} {${_:DV[print]}};
	};
	#else {
		#format _:DV[print] {${_:DV[format][${_:DV[fmt]}][varList]}} {%1};
		${_:DV[cmd]} {${_:DV[print]}};
		_procTable {%1} {0};
		#unvar _:TP;
		#format _:DV[print] {${_:DV[format][${_:DV[fmt]}][varEnd]}};
		${_:DV[cmd]} {${_:DV[print]}};
	};
	#unvar _:DV;
};

#alias {_procTable} {
	#var _:TP[%1][table]  {${%1}};
	#math _:TP[%1][indent] {%2 + ${_:DV[indent]}};
	#foreach {${_:TP[%1][table][]}} {_:TP[%1][key]} {
		#if {"&{_:TP[%1][table][${_:TP[%1][key]}][]}" != "0"} {
			#format _:TP[print] {%+${_:TP[%1][indent]}s${_:DV[format][${_:DV[fmt]}][listStart]}}  { } {${_:TP[%1][key]}};
			${_:DV[cmd]} {${_:TP[print]}};
			_procTable {_:TP[%1][table][${_:TP[%1][key]}]} {${_:TP[%1][indent]}};
			#format _:TP[print] {%+${_:TP[%1][indent]}s${_:DV[format][${_:DV[fmt]}][listEnd]}} { };
			#if {"${_:DV[fmt]}" == "json" || "${_:DV[fmt]}" == "lua"} {
				#list _:TPT create {${_:TP[%1][table][]}};
				#if {"${_:TP[%1][key]}" != "${_:TPT[-1]}"} {
					#var _:TP[print] {${_:TP[print]},};
				};
				#unvar _:TPT;
			};
			${_:DV[cmd]} {${_:TP[print]}};
		};
		#else {
			#if {"${_:TP[%1][table][${_:TP[%1][key]}]}" == ""} {
				#format _:TP[print] {%+${_:TP[%1][indent]}s${_:DV[format][${_:DV[fmt]}][keyNil]}} { } {${_:TP[%1][key]}};
			};
			#else {
				#var {_:TPV} {${_:TP[%1][table][${_:TP[%1][key]}]}};
				#if {"${_:DV[fmt]}" == "json" || "${_:DV[fmt]}" == "tintin"} {
					#replace {_:TPV} {<} {\x3C};
					#replace {_:TPV} {>} {\x3E};
				};
				#regex {${_:TP[%1][table][${_:TP[%1][key]}]}} {^{[0-9-]+}$} {
					#format _:TP[print] {%+${_:TP[%1][indent]}s${_:DV[format][${_:DV[fmt]}][keyInt]}} { } {${_:TP[%1][key]}} {${_:TPV}};
				} {
					#format _:TP[print] {%+${_:TP[%1][indent]}s${_:DV[format][${_:DV[fmt]}][keyVal]}} { } {${_:TP[%1][key]}} {${_:TPV}};
				};
				#unvar _:TPV;
			};
			#if {"${_:DV[fmt]}" == "json" || "${_:DV[fmt]}" == "lua"} {
				#list _:TPT create {${_:TP[%1][table][]}};
				#if {"${_:TP[%1][key]}" != "${_:TPT[-1]}"} {
					#var _:TP[print] {${_:TP[print]},};
				};
				#unvar _:TPT;
			};
			${_:DV[cmd]} {${_:TP[print]}};
		};
	};
	#var _:TP[%1] {};
}

/* Verify loading*/
#var loadState {1};
/* EOF */
