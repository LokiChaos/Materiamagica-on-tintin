#nop prompt/subprompt.tt

/* Top Status Bar {{{ */

#function {topBarColor} {
	#if {$stateChar[Dead]} {
		#return <117>;
	};
	#elseif {$stateChar[inSocial]} {
		#return <174>;
	};
	#else {
		#return <007>;
	};
}

#alias {_PromptTop} {
	#if {$navigation[repop] > 0} {
		#format __topB {[%d][%s} {$navigation[repop]} {$navigation[Zone]};
	}{
		#format __topB {[%s} {$navigation[Zone]};
	};	
	#format __topB {%.64s} {${__topB}};

	#format prompt[-1] {%s[%-12s  %+64s]<099>} {@topBarColor{}} {$charName]} {${__topB}};	
	#unvar __topB;
}
/* }}} */

#alias {_PromptNavBar} {
	#format prompt[b] {<099>%s<098>[%.23s<098>]  %+7s%+9s<078>[<178>%s%a<078>][<128>%+4s<108>x<098>,<128>%+4s<108>y<098>]%s%s}
		{@roomBar{}} {${_exitsC}}
		{@pickstr{ {stateChar[Lag]} {[<128>LAGED<098>]} {} }}
		{@pickstr{ {stateChar[Casting]} {[<138>CASTING<098>]} {@pickstr{ {stateChar[Playing]} {[<139>PLAYING<098>]} {} }} }}
		{$gtime[regen]} {37} {$navigation[X]} {$navigation[Y]} {$gtime[printMoon]};
}

/* Prompt Line #3 {{{ */
#alias {_PromptExtrasBar}
{
	#var prompt[3] {};
	#if {$stateChar[mounted]}
		{#format {prompt[3]} {<148>M:<098>%s<148>st<098>][%s}
			{$mount[stamina]} {$prompt[3]}};
	#if {$stateChar[Combat]}
		{#format {prompt[3]} {<158>%s%a<098>][%s}
			{$combat[mobHealth]} {37} {$prompt[3]}};
	#if {$stateChar[Flying]}
		{#format {prompt[3]} {%s<138>Flying %-2n (%+2s)<098>][}
			{$prompt[3]} {@std_dir_short{$navigation[flightBearing]}} {$navigation[click]}};
	#regex {$promptFlagsB} {([%d\x25]%w)%*} {
		#format {prompt[3]} {%s%s\x25<168> %s<098>][%s}
			{@vitalcolscale{&1 100}} {&1} {&2} {$prompt[3]};
	};

	#format {prompt[3]} {<098>[%s%-53s]} {} {$prompt[3]};
	#format {prompt[3]} {%s%s} {$prompt[3]} {@reagentBarMake{}};
}
/* }}} */

/* Echo Vitals Line In place of prompt  {{{ */
#alias {_CombatEcho} {
	#if {$stateChar[Combat]} {
		#regex {$promptFlagsB} {([%d%%]%w)%*} {
			#format {combat[formHP]} {[%s%% <168>%s<098>]} 
					{@vitalcolscale{&1 100}} {&1} {&2};
		} {
			#var combat[formHP] {};
		};
	    #echo {%s [<158>%s%a<198>] %s<099>}
		      {$vitals[print]} {$combat[mobHealth]} {37} {$combat[formHP]};
	    #if {(0 - $vitals[dhp]) > $vitals[hp]} {
			#echo {<719>>> Damage exceeded half of remaing HP! <<<<099>};
		};
	};
}
/* }}} */

/* Colorize Vitals {{{ */
#var __vitalsColors {
	{0}{<118>} {1}{<218>} {2}{<138>} {3}{<138>} {4}{<138>}
	{5}{<128>} {6}{<128>} {7}{<128>} {8}{<078>} {9}{<078>}
	{10}{<178>}
}

/* Handles Color Codes of vitals based on thier % of max value */
#function {vitalcolscale} {
	#return ${__vitalsColors[@std_math_min{10;@std_math_eval{10 * %1 / %2}}]};
}

/* Handles Colors for Vital Changes eg: +GREEN =WHITE -RED */
#function {vitalchangecol} {
	#if {%1 == 0} {
		#return <178>=;
	};
	#elseif {%1 < 0} {
		#return <118>%1;
	};
	#else {
		#return <128>+%1;
	}
}

/* Calcultes Vital's changes and generates colors */
#alias {_calcVitals} {
	#foreach {hp;sp;st} {__vit} {
		#math vitals[d][${__vit}]    {$vitals[c][${__vit}] - $vitals[o][${__vit}]};
		#var  vitals[col][${__vit}]  {@vitalcolscale{$vitals[c][${__vit}];$vitals[max][${__vit}]}};
		#var  vitals[col][d${__vit}] {@vitalchangecol{$vitals[d][${__vit}]}};
	};
	#unvar __vit;
};
/* }}} */

/*  Generates subunit of the status bar for misc flags {{{ 
	associted with states other than status affects.
	It also pads the string to fit with the vitals subunit.
*/

#var promptFlagTable {
	{1} {{v}{stateChar[Dead]}       {flag}{<159>Shade}{a}{1}}
	{2} {{v}{stateChar[Hungry]}     {flag}{<039>H}    {a}{0}}
	{3} {{v}{stateChar[Thirsty]}    {flag}{<149>T}    {a}{0}}
	{4} {{v}{stateChar[Encumbered]} {flag}{<019>Enc}  {a}{0}}
	{5} {{v}{stateChar[Paniced]}    {flag}{<119>PANIC}{a}{0}}
	{6} {{v}{stateChar[have_reagents]} {flag}{<169>Rx$stateChar[have_reagents]} {a}{0}}
	{7} {{v}{stateChar[Search]}     {flag}{<129>Search}{a}{1}}
	{8} {{v}{stateChar[Dig]}        {flag}{<129>Dig}  {a}{1}}
	{9} {{v}{stateChar[Questing]}   {flag}{<249>Q}    {a}{1}}
	{10}{{v}{stateChar[onCrystal]}  {flag}{<169>C}    {a}{1}}
	{11}{{v}{stateChar[onBounty]}   {flag}{<219>B}    {a}{1}}
	{12}{{v}{stateChar[onLuzzado]}  {flag}{<169>L}    {a}{1}}
	{13}{{v}{stateChar[Tracking]}   {flag}{<129>T}    {a}{1}}
	{14}{{v}{stateChar[Sitting]}    {flag}{<129>Sit}  {a}{1}}
	{15}{{v}{stateChar[Resting]}    {flag}{<129>Rest} {a}{1}}
	{16}{{v}{stateChar[Sleeping]}   {flag}{<129>Sleep}{a}{1}}
	{17}{{v}{stateChar[Away]}       {flag}{<159>A}    {a}{1}}
	{18}{{v}{stateChar[Quiet]}      {flag}{<129>Q}    {a}{1}}
	{19}{{v}{stateChar[have_news]}  {flag}{<129>News} {a}{1}}
	{20}{{v}{stateChar[have_mail]}  {flag}{<119>Mail} {a}{1}}
	{21}{{v}{stateChar[tagged]}     {flag}{<119>TAG!} {a}{1}}
	{22}{{v}{stateChar[invis]}      {flag}{<149>I}    {a}{1}}
};

/*
	foreach {flagsImp}
	foreach {flagsDef}
	foreach {flagsLow}
	low/def/imp -> one string
	cutoff
	_prompt_flag_add {value} {string}
	_prompt_flag_del {value}
*/

#function {promptFlagsBar} {
	#var __pFlags {<098>};		
	#if {$stateChar[Dead]} {
		#var {__pFlags} {${__pFlags}<099>[<159>Shade<099>]};
	} {
		#if {$stateChar[Hungry]} {
			#var {__pFlags} {${__pFlags}<099>[<039>H<099>]};
		};
		#if {$stateChar[Thirsty]} {
			#var {__pFlags} {${__pFlags}<099>[<149>T<099>]};
		};
		#if {$stateChar[Encumbered]} {
			#var {__pFlags} {${__pFlags}<099>[<019>Enc<099>]};
		};
		#if {$stateChar[Paniced]} {
			#var {__pFlags} {${__pFlags}<099>[<119>PANIC<099>]};
		};
		#if {$stateChar[have_reagents]} {
			#format {__pFlags} {${__pFlags}<099>[<169>Rx%d<099>]} {$stateChar[have_reagents]};
		};
		#if {$stateChar[have_bot]} {
			#var {__pFlags} {${__pFlags}<099>[<169>BoT<099>]};
		};	
	};
	#if {$stateChar[Search]} {
		#var {__pFlags} {${__pFlags}<099>[<129>Search<099>]};
	};
	#if {$stateChar[Dig]} {
		#var {__pFlags} {${__pFlags}<099>[<129>Dig<099>]};
	};
	#if {$stateChar[Questing]} {
		#var {__pFlags} {${__pFlags}<099>[<149>Q<099>]};
	};
	#if {$stateChar[onBounty]} {
		#var {__pFlags} {${__pFlags}<099>[<219>B<099>]};
	};
	#if {$stateChar[onCrystal]} {
		#var {__pFlags} {${__pFlags}<099>[<169>C<099>]};
	};
	#if {$stateChar[tracking]} {
		#var {__pFlags} {${__pFlags}<099>[<129>T<099>]};
	};
	#if {$stateChar[is_onSpeedWalk]} {
		#var {__pFlags} {${__pFlags}<099>[<139>SW<099>]};
	};
	#if {$stateChar[Sitting]} {
		#var {__pFlags} {${__pFlags}<099>[<129>s<099>]};
	};
	#elseif {$stateChar[Resting]} {
		#var {__pFlags} {${__pFlags}<099>[<129>R<099>]};
	};
	#elseif {$stateChar[Sleeping]} {
		#var {__pFlags} {${__pFlags}<099>[<129>S<099>]};
	};
	#if {$stateChar[Quiet]} {
		#var {__pFlags} {${__pFlags}<099>[<119>Q<099>]};
	};
	#if {$stateChar[Away]} {
		#var {__pFlags} {${__pFlags}<099>[<159>A<099>]};
	};
	#if {$stateChar[have_mail]} {
		#var {__pFlags} {${__pFlags}<099>[<119>Mail<099>]};
	};
	#if {$stateChar[have_news]} {
		#var {__pFlags} {${__pFlags}<099>[<129>News<099>]};
	};
	#if {$stateChar[tagged]} {
		#var {__pFlags} {${__pFlags}<099>[<119>TAG!<099>]};
	};
	#if {$stateChar[invis]} {
		#var {__pFlags} {${__pFlags}<099>[<149>I<099>]};
	};
	
	#format {result} {%.40s} {${__pFlags}};
	#unvar __pFlags;
}
/* }}} */



/* Return First or Second String based on if first arg is true {{{ */
#function {pickstr} {
	#if {${%1}} {
		#return %2;
	} {
		#return %3;
	}
}
/* }}} */

/* Generate a Blank Prompt Line {{{ */
#function {blankPrompt} {
	#format result {[%-78s]} { };
}
/* }}} */

/* Makes Vitals Subunit of prompt {{{
  Basic format: <####hp ####sp ####st> [= = =]   */
#function {promptVitalsBar} {
	#format {result} {<148>%a%s%s<148>hp %s%s<148>sp %s%s<148>st<148>%a [%s %s %s<148>]<098>}
		{60} {$vitals[col][hp]} {$vitals[c][hp]} {$vitals[col][sp]} {$vitals[c][sp]} {$vitals[col][st]} {$vitals[c][st]}
		{62} {$vitals[col][dhp]} {$vitals[col][dsp]} {$vitals[col][dst]};
}
/* }}} */

/* Generate Room State Indicator {{{ */
#var __rsCheck {
	{1}{{v}{CPK} {str}{<118>[CPK!]<098>}}
	{2}{{v}{NPK} {str}{<118>[NPK!]<098>}}
	{3}{{v}{LPK} {str}{<118>[LPK!]<098>}}
	{4}{{v}{nullification field} {str}{[<118>NULL<098>]}}
	{5}{{v}{cancellation} {str}{[<118>Cncl<098>]}}
	{6}{{v}{anti-magic sphere} {str}{[<118>AMS!<098>]}}
	{7}{{v}{momentary darkness} {str}{[<238>DARK<098>]}}
	{8}{{v}{Dizzy} {str}{[<128>DZZY<098>]}}
	{9}{{v}{Safe} {str}{[<178>SAFE<098>]}}
	{10}{{v}{Vmap} {str}{[<128>vMap<098>]}}
	{11}{{v}{quicksand} {str}{[<128>Quick<098>]}}
	{12}{{v}{room shield} {str}{[<138>RmSh<098>]}}
	{13}{{v}{storm} {str}{[<148>Strm<098>]}}
	{14}{{v}{acid mist} {str}{[<118>Acid<098>]}}
	{15}{{v}{gas} {str}{[<118>ToxG<098>]}}
	{16}{{v}{circle of fire} {str}{[<118>CofF<098>]}}
	{16}{{v}{circle of thorns} {str}{[<118>CofT<098>]}}
};

#function {roomBar} {
	#var result {[    ]};
	#foreach {${__rsCheck[]}} {__raff} {
		#if {$stateRoom[${__rsCheck[${__raff}][v]}]} {
			#var result ${__rsCheck[${__raff}][str]};
			#break;
		};
	};
	#unvar __raff;
}
/* }}} */

/* Reagent Count Section {{{ */
#function {reagentBarMake} {
  #format {result} {[<118>%+3s <168>%+3s <128>%+3s <138>%+3s <178>%+3s <108>%+3s<098>]}
          {$reagent[count][fire]} {$reagent[count][water]} {$reagent[count][earth]}
		  {$reagent[count][air]} {$reagent[count][gem]} {$reagent[count][ethereal]};
}
/* }}} */
