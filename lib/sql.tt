#nop lib/sql.tt;
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
	*/
#nop CLASS: sqlite;
#nop PROVIDES: lib/sql;
#nop REQUIRES: lib/print;

/*
  Generic SQLite Database Connector 
  Brief Help {{{
  db_submit works the same way as #format
  NB: You must enclose each argument in {}

  Usage: db_submit {returnvar} {db file} {sql expression} [{format-style args}]
       {select * from tablename where fieldname = '%s'} {match text}

  Parses the output and puts it into an associative array:
       $returnvar[recordnumber][fieldname]
   E.G. to get the data from HP field of the first record returned:
       #var {varname} {$returnvar[1][HP]}
  Usage: @db_submit{ {db file} {sql expression} [{format-style args}] }
	Similar to the alias, but in function form.
	}}}
*/

#function {db_submit} {
	db_submit result %0;
}

#alias {db_submit} {
	#if {"%0" != ""} {
		#nop generate #format command and execute it;
		#var _:dbFormat {#format {_:db[Command]} {%3}};
		#var _:db[argc] 0;
		#foreach {%0} {_:db[Temp]} {
			#math _:db[argc] {${_:db[argc]} + 1};
			#if {${_:db[argc]} > 3} {
				#replace {_:db[Temp]} {"} {'}; 
				#replace {_:db[Temp]} {'} {''}; 
				#if {"${_:db[Temp]}" != ""} { 
					#var {_:dbFormat} {${_:dbFormat} {${_:db[Temp]}}}; 
				}; 
			};
		};
		${_:dbFormat};
		#unvar _:dbFormat;

		#nop Call sqlite3 and make actual DB call;
		#var _:db[Call] {sqlite3 -header %2 "${_:db[Command]}"};
		#script {_:db[Res]} {${_:db[Call]}};
		#nop Replace pipe | field serpeators with semicolons for the #list command;
		#forall {${_:db[Res]}} {
			#replace _:db[Res][&0] {|} {;};
		};
		#nop build array off of _:dbRes;
		#var _:db[Out] {};
		#nop Build list of fields off the header;
		#list _:db[fields] create {${_:db[Res][1]}};
		#list _:db[Res] delete 1;
		#nop Process each returned record;
		#foreach {${_:db[Res][]}} {_:db[recordIdx]} {
			#list _:db[record] create {${_:db[Res][${_:db[recordIdx]}]}};
			#forall {${_:db[fields][]}} {
				#var _:db[Out][${_:db[recordIdx]}][${_:db[fields][&0]}] {${_:db[record][&0]}};
			};
		};
		#nop Save results in the desired var and cleanup local vars;
		#var {%1} {${_:db[Out]}};
		#unvar _:db;
	};
};

/* Verify loading */
#var loadState {1};
/* EOF */
