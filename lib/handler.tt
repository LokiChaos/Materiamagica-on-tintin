#nop lib/handler.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: eventHander;
#nop REQUIRES: lib/print;
#nop PROVIDES: lib/eventHandler;

/* Define bootstap alias to initalize array iff does not exist */
#if {&{_Events[]} == 0} {
	#alias {__EventBootstrap} {
		#var _Events {};
		#unalias {__EventBootstrap};
	};
}

#alias {__event_tmp_ali} {#nop;}

/*	event_register eventName handlerName action {{{
	adds action to the eventName event under the tag handlerName.
*/

#alias {_Event_register} {
	#var _Events[%1][%2] {%3};
}
/* }}} */

/*	event_oneshot eventName handlerName action {{{
	adds action to the eventName event under the tag handlerName.

	Like the above, but it only fires on the next call of the event and then
	removes itself.
*/

#alias {_Event_oneshot} {
	#var _Events[%1][%2] {_Event_remove_specific {%1} {%2};%3};
}
/* }}} */

/*	event_remove_event eventName {{{
	removes eventName completely
*/
#alias {_Event_remove_event} {
	#line substitute {variable} #unvar _Events[%1];
}
/* }}} */

/*	event_remove_handler handlerName {{{
	removes handlerName from all events
*/
#alias {_Event_remove_handler} {
	#foreach {${_Events[]}} {sublist} {
		#line substitute {variable} #unvar _Events[$sublist][%1];
		#if {"${_Events[$sublist]}" == ""} {
			#line substitute {variable} #unvar _Events[$sublist];
		};
	}
}
/* }}} */

/*	event_remove_specific eventName handlerName {{{
	removes handlerName from eventName
*/

#alias {_Event_remove_specific} {
	#line substitute {variable} #unvar _Events[%1][%2];
	#if {"${_Events[%1]}" == ""} {
		#line substitute {variable} #unvar _Events[%1];
	};
}
/* }}} */

/*	event_eval is a helper function {{{
	that allows dynamic alias definitions.
*/
#alias {event_eval} {
	#alias __event_tmp_ali {%1};
	__event_tmp_ali %2;
	#alias __event_tmp_ali #nop;
}
/* }}} */

/*	event_raise eventName args {{{
	calls all actions for eventName with args
*/
#alias {_Event_raise} {
	Print {DEBUG} {Event '<099>%0<>'};
	#foreach {${_Events[%1][]}} {_:EHandler} {
	Print {DEBUG} {Handler '<099>%s<>' called for '<099>%s<>'} {${_:EHandler}} {%1};
		#if {&{_Events[%1][${_:EHandler}]} != 0} {
			event_eval {${_Events[%1][${_:EHandler}]}} {%0};
		};
	};
	#unvar _:EHandler;
};
/* }}} */


/* Print list of all registered handlers */
#alias {_Events_print} {
	#echo {<149>Registered Handlers:<099>};
	#foreach {${_Events[]}} {_:EVPrint[event]} {
		#echo {<139> %s<099>} {${_:EVPrint[event]}};
		#foreach {${_Events[${_:EVPrint[event]}][]}} {_:EVPrint[handler]} {
			#echo {  -<129>%s<099>} {${_:EVPrint[handler]}};
		};
	};
	#unvar _:EVPrint;
}

/* Verify loading */
#var loadState {1};
/* EOF */
