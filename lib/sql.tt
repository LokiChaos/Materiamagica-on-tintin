#nop lib/sql.tt;
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
	*/
#nop CLASS: sqlite;
#nop PROVIDES: lib/sql;
#nop REQUIRES: lib/print lib/ttext;

/*
  Generic SQLite Database Connector 
  Brief Help {{{
  db_submit works the same way as #format
  NB: You must enclose each argument in {}

  Usage: db_submit {returnvar} {db file} {sql expression} [{format-style args}]
       {select * from tablename where fieldname = '%s'} {match text}

  Parses the output and puts it into an associative array:
       $returnvar[recordnumber][fieldname]
   E.G. to get the data from HP field of the first record returned:
       #var {varname} {$returnvar[1][HP]}
  Usage: @db_submit{ {db file} {sql expression} [{format-style args}] }
	Similar to the alias, but in function form.
	}}}
*/

#function {db_submit} {
	db_submit result %0;
}

#alias {db_submit} {
	beginScope;
	#if {"%0" != ""} {
		#nop generate #format command and execute it;
		#var my.dbFormat {#format {my.Command} {%3}};
		#var my.argc 0;
		#foreach {%0} {my.Temp} {
			#math my.argc {${my.argc} + 1};
			#if {${my.argc} > 3} {
				#replace {my.Temp} {"} {'};
				#replace {my.Temp} {'} {''};
				#if {"${my.Temp}" != ""} {
					#var {my.dbFormat} {${my.dbFormat} {${my.Temp}}};
				};
			};
		};
		${my.dbFormat};

		#nop Call sqlite3 and make actual DB call;
		#var my.Call {sqlite3 -header %2 "${my.Command}"};
		#script {my.Res} {${my.Call}};
		#nop Replace pipe | field serpeators with semicolons for the #list command;
		#forall {${my.Res}} {
			#replace my.Res[&0] {|} {;};
		};
		#nop build array off of _:dbRes;
		#var my.Out {};
		#nop Build list of fields off the header;
		#list my.fields create {${my.Res[1]}};
		#list my.Res delete 1;
		#nop Process each returned record;
		#foreach {${my.Res[]}} {my.recordIdx} {
			#list my.record create {${my.Res[${my.recordIdx}]}};
			#forall {${my.fields[]}} {
				#var my.Out[${my.recordIdx}][${my.fields[&0]}] {${my.record[&0]}};
			};
		};
		#nop Save results in the desired var and cleanup local vars;
		#var {%1} {${my.Out}};
	};
	endScope;
};

/* Verify loading */
#var loadState {1};
/* EOF */
