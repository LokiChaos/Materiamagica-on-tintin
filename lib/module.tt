#nop lib/module.tt;
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: modules;
#nop REQUIRES: lib/class lib/eventHandler lib/persistent lib/shell lib/print;
#nop PROVIDES: lib/modules;

#alias {_Module} {
	_Class load tmp/lib/module lib/rtlib/module.tt;
	__Module {%1} {%2};
	_Class purge tmp/lib/module;
}

#alias {insmod} {
	_Module insert {%1};
}

#alias {rmmod} {
	_Module remove {%1};
}

#alias {lsmod} {
	_Module list {%1};
}

#alias {helpmod} {
	_Module help {%1};
}

/*
	Module API
*/
#function {moduleGetStatus} {
	#list {_Modules[loaded]} find {%1} result;
	#if {$result != 0} {
		#var result 1;
	};
}

#function {moduleGetAuto} {
	#list {_Modules[autoload]} find {%1} result;
	#if {$result != 0} {
		#var result 1;
	};
}

/* Parse module files for info */
#function {moduleGetDesc} {
	#if {"%1" != ""} {
		#script {result} {awk '$0~/#nop DESC:/ {print $0}' %1/init.tt |sed -e 's/#nop DESC: //' -e 's/;$//'};
		#var result {$result[1]};
	} {
		#var result {};
	};
}

#function {moduleGetName} {
	#if {"%1" != ""} {
		#script {result} {awk '$0~/#nop MODULE:/ {print $3}' %1/init.tt |sed 's/;//'};
		#var result {$result[1]};
	} {
		#var result {};
	};
}

#function {moduleGetDeps} {
	#var result {};
	#if {"%1" != ""} {
		#script {result} {awk '$0~/#nop DEPS: / {for(i=3;i<=NF;i++){print $i}}' %1/init.tt |sed 's/;//'};
	};
}

/* Module Manifest */
#function {moduleGetIndex} {
	#var result {0};
	#foreach {${_Modules[manifest][]}} {_:MFtemp} {
		#if {"${_Modules[manifest][${_:MFtemp}][m]}" == "%1"} {
			#var result {${_:MFtemp}};
			#break;
		};
	};
	#unvar _:MFtemp;
}

#function {moduleGetPath} {
	#var _:MFtemp[idx] {@moduleGetIndex{%1}};
	#var result {${_Modules[manifest][${_:MFtemp[idx]}][p]}};
	#unvar _:MFtemp;
}

#function {moduleGetDepList} {
	#var _:MFtemp[idx] {@moduleGetIndex{%1}};
	#var result {${_Modules[manifest][${_:MFtemp[idx]}][d]}};
	#unvar _:MFtemp;
}

#function {moduleGetList} {
	#var _:ModTemp[path] {modules};
	#script {_:ModTemp[files]} {find ${_:ModTemp[path]} -name "init.tt" -printf "%h\n"| sort};
	#var _:ModTemp[list] {};
	#foreach {${_:ModTemp[files][]}} {_:ModTemp[idx]} {
		#list {_:ModTemp[list]} add {{
			{p}{${_:ModTemp[files][${_:ModTemp[idx]}]}}
			{m}{@moduleGetName{${_:ModTemp[files][${_:ModTemp[idx]}]}}}
			{d}{@moduleGetDeps{${_:ModTemp[files][${_:ModTemp[idx]}]}}}
		}};
	};
	#var result {${_:ModTemp[list]}};
	#unvar _:ModTemp;
}

/* All persistent values should be saved in $mod[mod_name][%*] {{{ */
_event_register {session_connect}    {moduleRecallLoad} {_modules_load};
_event_register {session_connect}    {zmoduleAutoLoad}  {_modules_auto};
_event_register {session_disconnect} {moduleRecallSave} {_modules_save};

#alias {_modules_auto} {
	#nop %1;
	@Print{ {INFO} {<139>Autoloading %m modules.} {&{_modules[AutoLoad][]}} };
	#foreach {${_modules[AutoLoad][]}} {_:mod} {
		insmod ${_modules[AutoLoad][${_:mod}]};
	};
	#unvar _:mod;
}

#alias {_modules_save} {
	#nop %1;
	@Print{ {INFO} {<139>Saving persistent module data.} };
	std_value_save {mod};
}

#alias {_modules_load} {
	#nop %1;
	@Print{ {INFO} {<139>Loading persistent module data.} };
	std_value_load {mod};
}
/* }}} */
