#nop lib/string.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: string;
#nop PROVIDES: lib/string;
#nop REQUIRES: lib/ttext;

#function {string_sanitize} {
	#var result {%0};
	#replace {result} {'} {\047};
}

/*
	Usage: @stringing_esc{ <string> }
	<string> = a string
	Returns: <string> with all non-Alphanum, _, and - escaped.
*/
#function {string_esc} {
	#var result {%0};
	#replace result {"} {\\"};
	#script {result} {echo "$(echo "$result" | sed 's/[^-A-Za-z0-9_]/\\&/g')"};
	#var result {$result[1]};
}

/*
	Usage: @stringing_escape{ {<string>} {<replacment table>} }
	<string> = a string
	<replacement table> = a table with keys being the patterns
		to be replaced with thier corrosponding values
	This is a genralized pattern replacement function.
	Generally, it is called by another specific-case escape function.
	Returns: <string> will every instance of every <pat> replaced with their corrisponding <rep>
*/
#function {string_multRep} {
	#var result[r] {%1};
	#var result[p] {%2};
	#foreach {${result[p][]}} {result[pat]} {
		#line sub var #replace {result[r]} {${result[pat]}} {${result[p][${result[pat]}]}};
	}
	#var result {${result[r]}};
}

/*
	Usage: @stringing_escape_shell{ <string> }
	Escape Un-safe for sh/awk/sed
	<string> = a string
	Returns: <string> with single and double quotes escaped.
*/
#function {string_escape_shell} {
	#var result @string_multRep{ {%0} {{\'}{\\'}{\"}{\\"}} };
}

/* Escaped URI */
#function {string_escape_uri} {
	#var result @string_multRep{ {%0}
	{{\{}{\0457B} {\}}{\0457D}
	 {\ }{\04520} {\=}{\0453D} {\&}{\04526}
	 {\:}{\0453A} {\\\;}{\0453B} {\/}{\0452F} {\\}{\0455C}
	 {\<}{\0453C} {\>}{\0453E} {\[}{\0455B} {\]}{\0455D}
	 {\$}{\04524} {\#}{\04523} {\|}{\0457C} {\^}{\0455E}
	 {\~}{\0457E} {\`}{\04560} {\?}{\0453F} {\@}{\04540}}
	};
}

/*
	Usage: @string_dropcomma{ <string> }
	<string> = a string
	Returns: the <string> with commas removed, intended for numbers
	         eg: 1,337 -> 1337
*/
#function {string_dropcomma} {
	#format result {%d} {%0}
}

/*
	Usage: @string_strip{ <string> }
	<string> = a string
	Returns: <string> will all SGR codes, tintin color codes, etc removed
*/
#function {string_strip} {
	#line strip {#var result {%0}};
	#replace result {<%.%.%.>} {};
}

/*
	Usage: @string_len{ <string> }
	<string> = a string
	Returns: the length of <string>
*/
#function {string_len} {
	#format result {%L} {%0};
}

/*
	Usage: @string_trim{ <string> }
	<string> = a string
	Returns: <string> with all leading and trailing spaces stripped
*/
#function {string_trim} {
	#regex {%0} {^{ *}%*{ *}$} {
		#var result {&2};
	};
}

/*
	Usage: @string_toLower{ <string> }
	<string> = a string
	Returns: <string> with all upper case converted to lower
*/
#function {string_toLower} {
	#format result {%l} {%0};
}

/*
	Usage: @string_toUpper{ <string> }
	<string> = a string
	Returns: <string> with all lower case converted to upper
*/
#function {string_toUpper} {
	#format result {%u} {%0};
}

/*
	Usage: @string_tokenize{ <string> }
	<string> = a string
	Returns: a list of the words in <string>, in the order they appear in
*/
#function {string_tokenize} {
	#list result create %0;
}

/*
	Usage: @string_reverse{ <string> }
	<string> = a string
	Returns: <string> mirrored/fliped/reversed
	        e.g.: foobar -> raboof
*/
#function {string_reverse} {
	#format result {%r} {%0};
}

/*
	Usage: @string_truncate{ {<string>} {<len>} }
	<string> = a string
	<len> = a positive integer
	Returns: <string> truncated to length <len>
*/
#function {string_truncate} {
	#format result {%.%2s} {%1};
}

/*
	Usage: @string_alignR{ {<string>} {<width>} }
	Returns: <string> padded to right align it to <width>
*/
#function {string_alignR} {
	#format result {%.%2s} {%1};
	#format result {%+%2s} {$result};
}

/*
	Usage: @string_alignR{ {<string>} {<width>} }
	Returns: <string> padded to left align it to <width>
*/
#function {string_alignL} {
	#format result {%-%2s} {%1};
	#format result {%.%2s} {$result};
}

/*
	Usage: @string_alignR{ {<string>} {<width>} }
	Returns: <string> padded to center it in <width>
*/
#function {string_alignC} {
	#format result[l] {%L} {%1};
	#math result[p] {(%2 - ${result[l]})/2};
	#format result[f] {PP+%msPPsPP+%ms} {${result[p]}} {%2 - ${result[p]} - ${result[l]}};
	#replace {result[f]} {PP} {%};
	#format result[r] {$result[f]} { } {%1} { };
	#var result {${result[r]}};
}

/*
	Usage: @string_substr{ {<string>} {<pos>} {<length>} }
	<pos> = integer position of substring
	<length> = integer length of substring
	Returns: nil or substring of <length> starting at <posistion> in <string>.
*/
#function {string_substr} {
	#regex {%1} {^{.{%2}}{.{%3}}%*} {
		#var result {&2};
	} {
		#var result {};
	};
}

/*
	Usage: @string_contains{ {<stringA>} {<stringB>} }
	<string> = a string
	Returns: 1 if <stringA> appears anywhere in <stringB> else 0.
*/
#function {string_contains} {
	#math result {"%2" == "%*%1%*"};
}

/*
	Usage: @string_containsWord{ {<stringA>} {<stringB>} }
	<string> = a string
	Returns: 1 if <stringA> appears as a word in <stringB> else 0.
*/
#function {string_containsWord} {
	#regex {%2} {{\b%1\b}} {
		#var result 1;
	} {
		#var result 0;
	};
}

/*
	Usage: @string_fuzzyCmp{ {<stringA>} {<stringB>} }
	<string> = a string
	A loose matching logic, if the longer matches the shorter up to the end of the shorter string
	Returns: 1 if <stringA> matches <stringB> else 0.
*/
#function {string_fuzzyCmp} {
	#math result {"%1" == "%2%*" || "%2" == "%1%*"};
}

/*
	Usage: @string_cmp{ {<string>} {<string>} }
	C-like string comparison
	Returns: 0 if strings match, -1 if first < second, +1 if first > second
*/
#function {string_cmp} {
	#if {"%1" == "%2"} {
		#var result 0;
	};
	#elseif {"%1" > "%2"} {
		#var result 1;
	};
	#else {
		#var result -1;
	};
}

/*
	Usage: @string_ncmp{ {<string>} {<string>} {<n>} }
	C-like string comparison, only compared first <n> characters
	Returns: 0 if strings match, -1 if first < second, +1 if first > second
*/
#function {string_ncmp} {
	#var result @string_cmp{ {@string_truncate{ {%1} {%3} }} {@string_truncate{ {%2 } {%3}}} };
}

/*
	Usage: @string_casecmp{ {<string>} {<string>} {<n>} }
	C-like string comparison, ignores case
	Returns: 0 if strings match, -1 if first < second, +1 if first > second
*/
#function {string_casecmp} {
	#var result @string_cmp{ {@string_toLower{%1}} {@string_toLower{%2}} };
}

/*
	Usage: @string_casencmp{ {<string>} {<string>} {<n>} }
	C-like string comparison, ignored case and only compared first <n> characters
	Returns: 0 if strings match, -1 if first < second, +1 if first > second
*/
#function {string_casencmp} {
	#var result @string_casecmp{ {@string_truncate{ {%1} {%3} }} {@string_truncate{ {%2 } {%3}}} };
}

/* Verify loading */
#var loadState {1};
/* EOF */
