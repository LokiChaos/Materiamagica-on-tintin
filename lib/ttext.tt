#nop lib/ttext.tt
/*
	Author: LokiChaos Â©2009-2016 Released under the ISC License (See doc/license.txt)
*/
#nop CLASS: ttext;
#nop PROVIDES: lib/ttext;

/* Various utilities that extend the basic functionality of the tintin++ language */

/* Variable Scope Manager */
/*
	Usage: beginScope
	Call to create a new scope
	*Loop over Flagged variables
		*Save Private var values
		*Restore shadowed values of !Local
	*Create new scope on stack
*/

#alias {beginScope} {
	#foreach {${_VS.Stack.1.List[]}} {_VS.Temp} {
		#if {"${_VS.Stack.1.List[${_VS.Temp}]}" == "p"} {
			#if {&{${_VS.Temp}}} {
				#var _VS.Stack.1.Private.${_VS.Temp} {${${_VS.Temp}}};
				#unvar ${_VS.Temp};
			};
			#if {&{_VS.Stack.1.Shadow[${_VS.Temp}]}} {
				#var ${_VS.Temp} {${_VS.Stack.1.Shadow[${_VS.Temp}]}};
			};
		};
	};
	#list _VS.Stack insert {1} {{List}{{my}{p}}
	                            {Private}{}
	                            {Shadow}{}};
}

/*
	Usage: endScope
	Call to cleanup current scope and restore prior

	*Cleanup inner scope beign exited
		*Unshadow all private/local vars
	*Pop off exited scope
	*Restore outer scope being returned to
		*Update Shadow values
		*Restore private vars
*/
#alias {endScope} {
	#foreach {${_VS.Stack.1.List[]}} {_VS.Temp} {
		#if {&{_VS.Stack.1.Shadow[${_VS.Temp}]}} {
			#var {${_VS.Temp}} {${_VS.Stack.1.Shadow[${_VS.Temp}]}};
		} {
			#unvar {${_VS.Temp}};
		};
	};

	#if {&{_VS.Stack[]} > 1} {
		#list _VS.Stack del 1;
	} {
		#var _VS.Stack.1 {{List}{{my}{p}}
	                      {Private}{}
	                      {Shadow}{}};
	};

	#foreach {${_VS.Stack.1.List[]}} {_VS.Temp} {
		#if {"${_VS.Stack.1.List[${_VS.Temp}]}" == "p"} {
			#var _VS.Stack.1.Shadow[${_VS.Temp}] {${${_VS.Temp}}};
			#if {&{_VS.Stack.1.Private[${_VS.Temp}]}} {
				#var {${_VS.Temp}} {${_VS.Stack.1.Private[${_VS.Temp}]}};
			} {
				#unvar {${_VS.Temp}};
			};
		};
	};
}

/*
	Usage: Local <varname> [<initalization value>]
	Declares a variable as local, old value is cached to be restored when
	Unlocal'ed or at exit of scope.
*/
#alias {Local} {
	__varFlag {%1} {%2} {l};
}

#alias {My} {
	__varFlag {%1} {%2} {p};
}

#alias {Unlocal} {
	__varUnFlag {%1} {%2} {l};
}

#alias {Unmy} {
	#if {"%1" != "my"} {
		__varUnFlag {%1} {%2} {l};
	};
}

/* Internal Helpers */
#alias {__varFlag} {
	#if {"%1" != "" && "%1" != "result" && !&{_VS.Stack.1.List[%1]}} {
		#var _VS.Stack.1.List[%1] {%3};
		#if {&{%1} != 0} {
			#var _VS.Stack.1.Shadow[%1] {${%1}};
		};
		#if {"%2" != ""} {
			#var {%1} {%2};
		};
	};
}

#alias {__varUnFlag} {
	#if {"%1" != "" && "%1" != "result" && "${_VS.Stack.1.List[%1]}" == "%3"} {
		#if {&{_VS.Stack.1.Shadow[%1]}} {
			#var {%1} {${_VS.Stack.1.Shadow[%1]}};
		} {
			#unvar {%1};
		};
		#unvar _VS.Stack.1.Shadow[%1];
		#unvar _VS.Stack.1.List[%1];
	};
}

/* Scope system API */

/* Returns the stack level the current scope is */
#function {scopeLevel} {
	#var result {&{_VS.Stack[]}};
}

/* Gets Stack level where <var> Locallity orginates */
#function {localLevel} {
	#foreach {${_VS.Stack[]}} {result} {
		#if {"${_VS.Stack[$result][List][%1]}" == "l"} {
			#break;
		};
	};
}

/* Returns variable scope */
/* global, pseudoglobal, local, private, state, undef */
#function {scopeType} {
	#var result {undef};
	#if {"%1" != "" && !&{%1}} {
		#if {"${_VS.Stack.1.List[%1]}" == "p"} {
			#var result {private};
		};
		#elseif {"${_VS.Stack.1.List[%1]}" == "l"} {
			#var result {local};
		};
		#else {
			#foreach {${_VS.Stack[]}} {result} {
				#if {"${_VS.Stack[$result][List][%1]}" == "l"} {
					#var result {pseudoglobal};
					#break;
				};
			};
			#if {"$result" != "pseudoglobal"} {
				#var result {global};
			};
		};
	};
}

/* Returns global value of a local variable */
#function {global} {
	#var result {};
	#if {"%1" != "" && "%1" != "my"} {
		#var result {${%1}};
		#foreach {${_VS.Stack[]}} {_VS.Temp.i} {
			#if {&{_VS.Stack[${_VS.Temp.i}][Shadow][%1]}} {
				#var result {${_VS.Stack[${_VS.Temp.i}][Shadow][%1]}};
			};
		};
		#unvar _VS.Temp;
	};
}

/* Returns value of the next outer scope's private variables */
#function {parent} {
	#var result {@nparent{ {2} {%1} }};
}

#function {gparent} {
	#var result {@nparent{ {3} {%1} }};
}

#function {nparent} {
	#var result {};
	#if {"%1" == "%d" && "%2" != ""} {
		#if {&{_VS.Stack.%1.Private.%2} != 0} {
			#var result {${_VS.Stack.%1.Private.%2}};
		};
	};
}

/*
	Bootstrap _VS table
*/
#if {!&{_VS}} {
	#alias {__ScopeBootstrap} {
		#var _VS {{Stack}{}};
		beginScope;
		#unalias __ScopeBootstrap;
	};
}

/*TODO: mode to debug.tt*/
#function {exectime} {
	#format _time[b] {%U};
	#if {"%2" == "%d"} {
		#%2 %1;
	} {
		%1;
	};
	#format _time[e] {%U};
	#var _time[n] @if{ {"%2" == "%d"} {%2} {1} };
	#math result {(${_time[e]} - ${_time[b]}) / ${_time[n]}};
	#unvar _time;
}

/* Terniary Conditional */
#function {if} {
	#if {%1} {
		#return {%2};
	} {
		#return {%3};
	};
}

/* Functional Evaluate/Math */
#function {eval} {
	#math result {%0};
}

/* Fuctional Format */
#function {format} {
	#format result %0;
}

/* Functional Regex
	Usage: @r{ {<string>} {<pattern>} {<count>}
	Returns: list of matches &1 to &<count> in a list or 0 if <string> does not match <pattern>
*/
#function {regex} {
	beginScope;
	#var my.func {
		#function {__r} {
			#regex {%1} {%2} {
				#var result {TBL};
			} {
				#var result 0;
			};
		};
	};
	#loop {1} {%3} {my.i} {
		#var my.tbl[${my.i}] {\&${my.i}};
	};
	#replace {my.func} {TBL} {${my.tbl}};
	#replace {my.func} {\\} {};
	${my.func};
	#var result @__r{ {%1} {%2} };
	#unfunc __r;
	endScope;
}

/* Turns %0 into a ordered list of arguments, correcting for trailing spaces */
#function {argList} {
	#list result create {%0};
	#regex {%0} {{ +}$} {
		#if {"${result[-1]}" == ""} {
			#list result delete {-1};
		};
	};
}

/* One-Shot Alias/Action */
#alias {action_oneshot} {
	#act {%1} {
		%2;#unact {%1};
	};
}

#alias {alias_oneshot} {
	#alias {%1} {
		%2;#unalias {%1};
	};
}

/* Verify loading */
#var loadState {1};
/* EOF */
